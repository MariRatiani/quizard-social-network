package DAOTest;

import DB.ConnectionPool;
import model.DAO.QuizCategoryDAO;
import model.DAO.QuizDAO;
import model.DAO.UserDAO;
import model.objects.Quiz;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.List;

import static org.junit.Assert.*;

public class QuizDAOTest {
    private ConnectionPool pool;
    private QuizDAO quizDAO;
    private UserDAO userDAO;
    private int userId1;
    private QuizCategoryDAO quizCategoryDAO;

    @Before
    public void setUp() throws SQLException, NoSuchAlgorithmException {
        // Set up the ConnectionPool and AnnouncementDAO before each test
        pool = new ConnectionPool(true);
        quizDAO = new QuizDAO(pool);
        userDAO = new UserDAO(pool);
        quizCategoryDAO = new QuizCategoryDAO(pool);
        userId1 = userDAO.addUser("user1", "", "user1");
        quizCategoryDAO.addQuizCategory("Science");
        quizCategoryDAO.addQuizCategory("Biology");
    }

    @After
    public void tearDown() throws SQLException {
        // Release any remaining connections and clean up after each test
        quizCategoryDAO.deleteAllCategories();
        userDAO.removeAll();
        pool.close();
    }

    @Test
    public void testAddQuiz() throws SQLException {
        // Create a Quiz object with test data
        Quiz quizToAdd = new Quiz(
                0, // Set to 0 since it will be autogenerated
                "Test Quiz",
                "This is a test quiz",
                "Science",
                userId1,
                true,
                false,
                true,
                false,
                LocalDateTime.now(),
                60,
                0,
                100
        );

        int insertedQuizId = quizDAO.addQuiz("Test Quiz", "This is a test quiz", "Science", userId1,
                true, false, true, false, LocalDateTime.now(),
                100, 0, 60);
        assertNotEquals(-1, insertedQuizId);

        Quiz insertedQuiz = quizDAO.getQuiz(insertedQuizId);
        assertEquals(insertedQuiz.getName(), "Test Quiz");

        assertTrue(insertedQuiz.isRandomOrder());
        assertFalse(insertedQuiz.displayOnMultiplePages());
        assertTrue(insertedQuiz.shouldCorrectImmediatly());
        assertEquals(insertedQuizId, insertedQuiz.getQuizId());
        assertEquals(insertedQuiz.getAmountTaken(), 0);
        assertEquals(insertedQuiz.getTimeLimit(), 60);
        assertEquals(insertedQuiz.getCategory(),"Science");
        assertEquals(insertedQuiz.getName(),"Test Quiz");
        assertEquals(insertedQuiz.getDescription(),"This is a test quiz");
        assertEquals(insertedQuiz.getCreatorID(),userId1);
        assertEquals(insertedQuiz.getMaxPoints(),100);
    }
    @Test
    public void testGetAllQuizzes() throws SQLException {
        Quiz quizToAdd = new Quiz(
                0, // Set to 0 since it will be autogenerated
                "Test Quiz",
                "This is a test quiz for all",
                "Science",
                userId1,
                true,
                false,
                true,
                false,
                LocalDateTime.now(),
                60,
                0,
                100
        );
        int insertedQuizId = quizDAO.addQuiz("Test Quiz", "This is a test quiz for all", "Science", userId1,
                true, false, true, false, LocalDateTime.now(),
                100, 0, 60);

        List<Quiz> quizzes = quizDAO.getAllQuizzes();
        assertEquals(1, quizzes.size());
        assertEquals(quizzes.get(0).getName(), quizToAdd.getName());
        assertEquals(quizzes.get(0).getCategory(), quizToAdd.getCategory());
        assertEquals(quizzes.get(0).getDescription(), quizToAdd.getDescription());
    }
    @Test
    public void testGetCreatorQuizzes() throws SQLException {
        List<Quiz> creatorQuizzes = quizDAO.getCreatorQuizzes(userId1);
        assertEquals(0, creatorQuizzes.size());
        Quiz quizToAdd = new Quiz(
                0, // Set to 0 since it will be autogenerated
                "Test Quiz1",
                "This is a test quiz for creator",
                "Biology",
                userId1,
                true,
                false,
                true,
                false,
                LocalDateTime.now(),
                60,
                0,
                100
        );
        int insertedQuizId = quizDAO.addQuiz("Test Quiz1", "This is a test quiz for creator", "Biology", userId1,
                true, false, true, false, LocalDateTime.now(),
                100, 0, 60);
        List<Quiz> creatorQuizzes2 = quizDAO.getCreatorQuizzes(userId1);
        assertEquals(1, creatorQuizzes2.size());
        assertEquals(quizToAdd.getCategory(), creatorQuizzes2.get(0).getCategory());
        assertEquals(quizToAdd.getDescription(), creatorQuizzes2.get(0).getDescription());
    }
    @Test
    public void testGetPopularQuizzes() throws SQLException {
        Quiz quizToAdd1 = new Quiz(
                0, // Set to 0 since it will be autogenerated
                "Test Quiz2",
                "This is a test quiz for popular",
                "Biology",
                userId1,
                true,
                false,
                true,
                false,
                LocalDateTime.now(),
                60,
                102,
                100
        );
        int insertedQuizId = quizDAO.addQuiz("Test Quiz2", "This is a test quiz for popular", "Biology", userId1,
                true, false, true, false, LocalDateTime.now(),
                100, 102, 60);
        Quiz quizToAdd2 = new Quiz(
                0, // Set to 0 since it will be autogenerated
                "Test Quiz3",
                "This is a test quiz for popular2",
                "Biology",
                userId1,
                true,
                false,
                true,
                false,
                LocalDateTime.now(),
                60,
                100,
                100
        );
        int insertedQuizId2 = quizDAO.addQuiz("Test Quiz3", "This is a test quiz for popular2", "Biology", userId1,
                true, false, true, false, LocalDateTime.now(),
                100, 100, 60);
        List<Quiz> popularQuizzes = quizDAO.getPopularQuizzes();

        assertEquals(2, popularQuizzes.size());
        assertEquals(quizToAdd1.getAmountTaken(), popularQuizzes.get(0).getAmountTaken());
        assertEquals(popularQuizzes.get(0).getName(), quizToAdd1.getName());
        assertEquals(popularQuizzes.get(1).getName(), quizToAdd2.getName());
        assertEquals(popularQuizzes.get(0).getCategory(), quizToAdd1.getCategory());
        assertEquals(popularQuizzes.get(1).getDescription(), quizToAdd2.getDescription());
    }
    @Test
    public void testGetRecentlyCreatedQuizzes() throws SQLException {
        int insertedQuizId = quizDAO.addQuiz("Test Recent", "This is a test quiz2", "Biology", userId1,
                true, false, true, false, LocalDateTime.now(),
                100, 2, 60);
        List<Quiz> recentlyCreatedQuizzes = quizDAO.getRecentlyCreatedQuizzes();
        assertEquals(recentlyCreatedQuizzes.size(), 1);
        assertEquals(recentlyCreatedQuizzes.get(0).getName(), "Test Recent");
    }

    @Test
    public void testRemoveQuiz() throws SQLException {
        int insertedQuizId = quizDAO.addQuiz("Test Quiz", "This is a test quiz", "Science", userId1,
                true, false, true, false, LocalDateTime.now(),
                100, 0, 60);
        assertEquals(quizDAO.getAllQuizzes().size(), 1);
        quizDAO.removeQuiz(insertedQuizId);
        assertEquals(quizDAO.getAllQuizzes().size(), 0);
    }

}